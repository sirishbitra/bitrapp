"use strict";var ApplicationConfiguration=function(){var applicationModuleName="bitrApp",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!")}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("contacts"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("users"),angular.module("articles"),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("contacts"),angular.module("contacts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listContacts",{url:"/contacts",templateUrl:"modules/contacts/views/list-contacts.client.view.html"}).state("createContact",{url:"/contacts/create",templateUrl:"modules/contacts/views/create-contact.client.view.html"}).state("viewContact",{url:"/contacts/:contactId",templateUrl:"modules/contacts/views/view-contact.client.view.html"}).state("editContact",{url:"/contacts/:contactId/edit",templateUrl:"modules/contacts/views/edit-contact.client.view.html"})}]),angular.module("contacts").controller("ContactsController",["$scope","$stateParams","$location","Authentication","Contacts",function($scope,$stateParams,$location,Authentication,Contacts){$scope.authentication=Authentication,$scope.create=function(){var contact=new Contacts({name:this.name,mobile:this.mobile,ccode:this.ccode,createdBy:$scope.authentication.user._id});contact.$save(function(response){$location.path("contacts/"+response._id),$scope.name="",$scope.moble="",$scope.ccode=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contact){if(contact){contact.$remove();for(var i in $scope.contacts)$scope.contacts[i]===contact&&$scope.contacts.splice(i,1)}else $scope.contact.$remove(function(){$location.path("contacts")})},$scope.update=function(){var contact=$scope.contact;contact.$update(function(){$location.path("contacts/"+contact._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.contacts=Contacts.query()},$scope.findOne=function(){$scope.contact=Contacts.get({contactId:$stateParams.contactId})}}]),angular.module("contacts").factory("Contacts",["$resource",function($resource){return $resource("contacts/:contactId",{contactId:"@_id",userId:""},{update:{method:"PUT"},getByUser:{method:"GET",params:{}}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]).directive("navigation",function(){return{restrict:"E",templateUrl:"modules/core/views/navigation.dir.html",controller:["$scope",function($scope){$scope.foo="bar"}],link:function(scope,element){scope.name="Jeff"}}}).directive("userInfo",function(){return{restrict:"E",replace:!0,templateUrl:"modules/core/views/user_info.dir.html",controller:["$scope",function($scope){}],link:function(scope,element){scope.username="Sirish Bitra",scope.lastSeen="Nov. 2014"}}}),angular.module("core").controller("HomeController",["$scope","Authentication","Watools","$location","$rootScope","Contacts",function($scope,Authentication,Watools,$location,$rootScope,Contacts){Authentication.user||$location.path("signin"),$scope.authentication=Authentication,$scope.isSubcribe||Watools.subscribe(function(){$scope.isSubcribe=!0},function(){$scope.isSubcribe=!1}),console.log("home "),$scope.chatRoom=function(){Contacts.$getByUser({userId:$scope.authentication.user._id}).$promise.then(function(res){$scope.contacts=res,$scope.contactedUser=res[0]})},$scope.showChat=function(contact){$scope.contactedUser=contact}}]).directive("chatRoom",function(){return{restrict:"E",scope:{contacts:"=",user:"=",onContactSelect:"="},controller:["$scope",function($scope){}],templateUrl:"modules/core/views/chatroom.client.view.html"}}).directive("chatBox",function(){return{restrict:"E",templateUrl:"modules/core/views/chatbox.client.view.html",scope:{chatUser:"="},controller:["$scope",function($scope){}],link:function(scope,element){}}}),angular.module("core").directive("userAvatar",function(){return{restrict:"A",scope:{userId:"="},controller:["$scope",function($scope){}],link:function(scope,element){element.attr("src","modules/core/img/avatar.png"),element.attr("alt","User Image")}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]).service("Watools",["$http","Authentication",function($http,Authentication){var url="https://api.wha.tools/v1/",key="2644a25d-7a11-4600-959e-e9c9babbcf9c";this.subscribe=function(successCallBack,errorCallBack){$http.get(url+"subscribe?key="+key).success(function(response){successCallBack(response)}).error(function(response){response.message;errorCallBack(response)})}}]),angular.module("core").service("api",[function(){}]),angular.module("groups"),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-group.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("groupsController",["$scope","$stateParams","$location","Authentication","Groups","Contacts",function($scope,$stateParams,$location,Authentication,Contacts){$scope.authentication=Authentication,$scope.create=function(){var contact=new Contacts({name:this.name});contact.$save(function(response){$location.path("contacts/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contact){if(contact){contact.$remove();for(var i in $scope.contacts)$scope.contacts[i]===contact&&$scope.contacts.splice(i,1)}else $scope.contact.$remove(function(){$location.path("contacts")})},$scope.update=function(){var contact=$scope.contact;contact.$update(function(){$location.path("contacts/"+contact._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.contacts=Contacts.query()},$scope.findOne=function(){$scope.contact=Contacts.get({contactId:$stateParams.contactId})}}]),angular.module("contacts").factory("Contacts",["$resource",function($resource){return $resource("contacts/:contactId",{contactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);